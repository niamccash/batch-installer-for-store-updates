<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>0</cache_ttl>
        <enhanced_capacity>false</enhanced_capacity>
        <flow/>
        <name>Populate Available updates</name>
        <script><![CDATA[(function executeQuery(v_table, v_query) {
      var res = {};
      var versionLevel = {'major': 3, 'minor': 2, 'patch': 1, 'none': 0};
      var versionLevelAscending = Object.keys(versionLevel).reverse();

      var getAvailableVersion = function (appSysId)
      {
          var vers = [];
          var v = new GlideRecord('sys_app_version');
          v.addQuery('source_app_id', '=', appSysId);
          v.orderBy('version');
          v.query();
          while(v.next())
          {
              vers.push({'sys_id': v.getUniqueValue(), 'name': v.getDisplayValue(), 'version': v.getValue('version'), 'publish_date': v.getValue('publish_date')});
          }
          return vers;
      };

      var compareVersion = function (currentVer, availableVer)
      {
          var currentVerParts = currentVer.split('.');
          var availableVerParts = availableVer.split('.');
          var diff = 'None';

          if (currentVerParts[0] !== availableVerParts[0]) {
              diff = 'Major';
          } else if (currentVerParts[1] !== availableVerParts[1]) {
              diff = 'Minor';
          } else if (currentVerParts[2] !== availableVerParts[2]) {
              diff = 'Patch';
          } else {
              diff = 'No';
          }
          return diff;
      };

      var storeAppVer = new GlideRecord('sys_store_app');
      storeAppVer.addQuery('active', '=', true);
      storeAppVer.addQuery('update_available', '=', true);
      storeAppVer.query();

      // Create scan finding
      while (storeAppVer.next())
      {
          var cur = storeAppVer.getUniqueValue();
          var availVersion = getAvailableVersion(cur);
          for(var v in availVersion)
          {
              var ver = availVersion[v];
              var diff = compareVersion(storeAppVer.getValue('version'), ver.version).toLowerCase();

              if(res.hasOwnProperty(cur) == false)
              {
                var versionTemplate = {'sys_id': null, 
                                        'application': null,
                                        'level': null,
                                        'available_version': null, 
                                        'installed_version': null, 
                                        'latest_major_version': null, 
                                        'latest_minor_version': null, 
                                        'latest_patch_version': null,
                                        'major_count': 0,
                                        'minor_count': 0,
                                        'patch_count': 0};
                res[cur] = {'major': Object.assign({}, versionTemplate), 'minor': Object.assign({}, versionTemplate), 'patch': Object.assign({}, versionTemplate), 'no': Object.assign({}, versionTemplate)};
              }

              res[cur][diff].sys_id = ver.sys_id;
              res[cur][diff].application = cur;
              res[cur][diff].level = diff;
              res[cur][diff].available_version = ver.sys_id;
              res[cur][diff].version = ver.version;
              res[cur][diff].installed_version = storeAppVer.getValue('version');
              if(diff == 'patch')
              {
                res[cur][diff].latest_patch_version = ver.sys_id;
                res[cur][diff].latest_minor_version = ver.sys_id;
                res[cur][diff].latest_major_version = ver.sys_id;
              }
              if(diff == 'minor')
              {
                res[cur][diff].latest_minor_version = ver.sys_id;
                res[cur][diff].latest_major_version = ver.sys_id;
              }
              if(diff == 'major')
              {
                res[cur][diff].latest_major_version = ver.sys_id;
              }

              res[cur]['patch'].latest_version_level = diff;
              res[cur]['minor'].latest_version_level = diff;
              res[cur]['major'].latest_version_level = diff;

              res[cur]['patch'][diff + '_count']++;
              res[cur]['minor'][diff + '_count']++;
              res[cur]['major'][diff + '_count']++;

              res[cur][diff].name = storeAppVer.getDisplayValue() + ' - ' + ver.version;          
          }
      }

      for(var app in res)
      {
        var lastLevel = res[app]['patch'];
        for(var l in versionLevelAscending)
        {
            var levelCheck = versionLevelAscending[l];
            if(l > 0)
            {
                if(gs.nil(res[app][levelCheck].application))
                {
                    //gs.addInfoMessage('checking - not set: ' + levelCheck);
                    res[app][levelCheck] = lastLevel;
                } else {
                    //gs.addInfoMessage('checking - set: ' + levelCheck);
                    lastLevel = res[app][levelCheck];
                }
            }
        }

        for(var lev in res[app])
        {
            res[app][lev].batch_level = lev;
            if(!gs.nil(res[app][lev].available_version))
            {
                v_table.addRow(res[app][lev]);
            }
        }
    }
  })(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>nia.mccash</sys_created_by>
        <sys_created_on>2024-11-21 21:16:20</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>432d298dc3cad2108dbc32f1b401312f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Populate Available updates</sys_name>
        <sys_package display_value="Batch Installer for Store Updates" source="x_23746_batch_in_0">11aba50dc3cad2108dbc32f1b4013123</sys_package>
        <sys_policy/>
        <sys_scope display_value="Batch Installer for Store Updates">11aba50dc3cad2108dbc32f1b4013123</sys_scope>
        <sys_update_name>sys_script_vtable_432d298dc3cad2108dbc32f1b401312f</sys_update_name>
        <sys_updated_by>nia.mccash</sys_updated_by>
        <sys_updated_on>2024-11-21 21:16:20</sys_updated_on>
        <table>x_23746_batch_in_0_st_available_update</table>
    </sys_script_vtable>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>432d298dc3cad2108dbc32f1b401312f</id>
        <sys_created_by>nia.mccash</sys_created_by>
        <sys_created_on>2024-11-21 21:16:20</sys_created_on>
        <sys_id>fd6d298dc3cad2108dbc32f1b4013187</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>nia.mccash</sys_updated_by>
        <sys_updated_on>2024-11-21 21:16:20</sys_updated_on>
        <table>sys_script_vtable</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
